{"version":3,"sources":["../src/index.js"],"names":["GIF","GifUtil","GifFrame","BitmapImage","GifCodec","MIME_TYPE","mime","constants","MIME_GIF","decoders","data","console","log","gifObj","GifReader","gifData","Buffer","alloc","width","height","decodeAndBlitFrameRGBA","encoders","bitmap","quantizeDekker","newFrame","gifCodec","encodeGif","then","newGif","buffer"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,WAA5B,EAAyCC,QAAzC,QAAyD,SAAzD;;AAEA,MAAMC,YAAY,WAAlB;;AAEA,gBAAe,OAAO;AACpBC,QAAM,EAAE,CAACD,SAAD,GAAa,CAAC,KAAD,CAAf,EADc;;AAGpBE,aAAW;AACTC,cAAUH;AADD,GAHS;;AAOpBI,YAAU;AACR,KAACJ,SAAD,GAAcK,IAAD,IAAU;AACrBC,cAAQC,GAAR,CAAYF,IAAZ;;AAEA,YAAMG,SAAS,IAAIb,IAAIc,SAAR,CAAkBJ,IAAlB,CAAf;AACA,YAAMK,UAAUC,OAAOC,KAAP,CAAaJ,OAAOK,KAAP,GAAeL,OAAOM,MAAtB,GAA+B,CAA5C,CAAhB;;AAEAN,aAAOO,sBAAP,CAA8B,CAA9B,EAAiCL,OAAjC;;AAEA,aAAO;AACLL,cAAMK,OADD;AAELG,eAAOL,OAAOK,KAFT;AAGLC,gBAAQN,OAAOM;AAHV,OAAP;AAKD;AAdO,GAPU;;AAwBpBE,YAAU;AACR,KAAChB,SAAD,GAAcK,IAAD,IAAU;AACrBC,cAAQC,GAAR,CAAYF,IAAZ;;AAEA,YAAMY,SAAS,IAAInB,WAAJ,CAAgBO,KAAKY,MAArB,CAAf;AACArB,cAAQsB,cAAR,CAAuBD,MAAvB,EAA+B,GAA/B;AACA,YAAME,WAAW,IAAItB,QAAJ,CAAaoB,MAAb,CAAjB;AACA,YAAMG,WAAW,IAAIrB,QAAJ,EAAjB;AACA,aAAOqB,SAASC,SAAT,CAAmB,CAACF,QAAD,CAAnB,EAA+B,EAA/B,EAAmCG,IAAnC,CAAyCC,MAAD,IAAY;AACzD,eAAOA,OAAOC,MAAd;AACD,OAFM,CAAP;AAGD;AAXO;AAxBU,CAAP,CAAf","file":"index.js","sourcesContent":["import GIF from \"omggif\";\nimport { GifUtil, GifFrame, BitmapImage, GifCodec } from \"gifwrap\";\n\nconst MIME_TYPE = \"image/gif\";\n\nexport default () => ({\n  mime: { [MIME_TYPE]: [\"gif\"] },\n\n  constants: {\n    MIME_GIF: MIME_TYPE,\n  },\n\n  decoders: {\n    [MIME_TYPE]: (data) => {\n      console.log(data);\n\n      const gifObj = new GIF.GifReader(data);\n      const gifData = Buffer.alloc(gifObj.width * gifObj.height * 4);\n\n      gifObj.decodeAndBlitFrameRGBA(0, gifData);\n\n      return {\n        data: gifData,\n        width: gifObj.width,\n        height: gifObj.height,\n      };\n    },\n  },\n\n  encoders: {\n    [MIME_TYPE]: (data) => {\n      console.log(data);\n\n      const bitmap = new BitmapImage(data.bitmap);\n      GifUtil.quantizeDekker(bitmap, 256);\n      const newFrame = new GifFrame(bitmap);\n      const gifCodec = new GifCodec();\n      return gifCodec.encodeGif([newFrame], {}).then((newGif) => {\n        return newGif.buffer;\n      });\n    },\n  },\n});\n"]}